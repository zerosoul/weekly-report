// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  eEE: (where?: EEEWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  reportItem: (where?: ReportItemWhereInput) => Promise<boolean>;
  sendRecord: (where?: SendRecordWhereInput) => Promise<boolean>;
  timeRange: (where?: TimeRangeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  eEE: (where: EEEWhereUniqueInput) => EEEPromise;
  eEEs: (
    args?: {
      where?: EEEWhereInput;
      orderBy?: EEEOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EEE>;
  eEEsConnection: (
    args?: {
      where?: EEEWhereInput;
      orderBy?: EEEOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EEEConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Group>;
  groupsConnection: (
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GroupConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportPromise;
  reports: (
    args?: {
      where?: ReportWhereInput;
      orderBy?: ReportOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Report>;
  reportsConnection: (
    args?: {
      where?: ReportWhereInput;
      orderBy?: ReportOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReportConnectionPromise;
  reportItem: (where: ReportItemWhereUniqueInput) => ReportItemPromise;
  reportItems: (
    args?: {
      where?: ReportItemWhereInput;
      orderBy?: ReportItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ReportItem>;
  reportItemsConnection: (
    args?: {
      where?: ReportItemWhereInput;
      orderBy?: ReportItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReportItemConnectionPromise;
  sendRecord: (where: SendRecordWhereUniqueInput) => SendRecordPromise;
  sendRecords: (
    args?: {
      where?: SendRecordWhereInput;
      orderBy?: SendRecordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SendRecord>;
  sendRecordsConnection: (
    args?: {
      where?: SendRecordWhereInput;
      orderBy?: SendRecordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SendRecordConnectionPromise;
  timeRanges: (
    args?: {
      where?: TimeRangeWhereInput;
      orderBy?: TimeRangeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TimeRange>;
  timeRangesConnection: (
    args?: {
      where?: TimeRangeWhereInput;
      orderBy?: TimeRangeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TimeRangeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEEE: () => EEEPromise;
  deleteEEE: (where: EEEWhereUniqueInput) => EEEPromise;
  deleteManyEEEs: (where?: EEEWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (
    args: { data: GroupUpdateInput; where: GroupWhereUniqueInput }
  ) => GroupPromise;
  updateManyGroups: (
    args: { data: GroupUpdateManyMutationInput; where?: GroupWhereInput }
  ) => BatchPayloadPromise;
  upsertGroup: (
    args: {
      where: GroupWhereUniqueInput;
      create: GroupCreateInput;
      update: GroupUpdateInput;
    }
  ) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (
    args: { data: ReportUpdateInput; where: ReportWhereUniqueInput }
  ) => ReportPromise;
  updateManyReports: (
    args: { data: ReportUpdateManyMutationInput; where?: ReportWhereInput }
  ) => BatchPayloadPromise;
  upsertReport: (
    args: {
      where: ReportWhereUniqueInput;
      create: ReportCreateInput;
      update: ReportUpdateInput;
    }
  ) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createReportItem: (data: ReportItemCreateInput) => ReportItemPromise;
  updateReportItem: (
    args: { data: ReportItemUpdateInput; where: ReportItemWhereUniqueInput }
  ) => ReportItemPromise;
  updateManyReportItems: (
    args: {
      data: ReportItemUpdateManyMutationInput;
      where?: ReportItemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertReportItem: (
    args: {
      where: ReportItemWhereUniqueInput;
      create: ReportItemCreateInput;
      update: ReportItemUpdateInput;
    }
  ) => ReportItemPromise;
  deleteReportItem: (where: ReportItemWhereUniqueInput) => ReportItemPromise;
  deleteManyReportItems: (where?: ReportItemWhereInput) => BatchPayloadPromise;
  createSendRecord: (data: SendRecordCreateInput) => SendRecordPromise;
  updateSendRecord: (
    args: { data: SendRecordUpdateInput; where: SendRecordWhereUniqueInput }
  ) => SendRecordPromise;
  updateManySendRecords: (
    args: {
      data: SendRecordUpdateManyMutationInput;
      where?: SendRecordWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSendRecord: (
    args: {
      where: SendRecordWhereUniqueInput;
      create: SendRecordCreateInput;
      update: SendRecordUpdateInput;
    }
  ) => SendRecordPromise;
  deleteSendRecord: (where: SendRecordWhereUniqueInput) => SendRecordPromise;
  deleteManySendRecords: (where?: SendRecordWhereInput) => BatchPayloadPromise;
  createTimeRange: (data: TimeRangeCreateInput) => TimeRangePromise;
  updateManyTimeRanges: (
    args: {
      data: TimeRangeUpdateManyMutationInput;
      where?: TimeRangeWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyTimeRanges: (where?: TimeRangeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  eEE: (
    where?: EEESubscriptionWhereInput
  ) => EEESubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  reportItem: (
    where?: ReportItemSubscriptionWhereInput
  ) => ReportItemSubscriptionPayloadSubscription;
  sendRecord: (
    where?: SendRecordSubscriptionWhereInput
  ) => SendRecordSubscriptionPayloadSubscription;
  timeRange: (
    where?: TimeRangeSubscriptionWhereInput
  ) => TimeRangeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ReportItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "content_ASC"
  | "content_DESC"
  | "progress_ASC"
  | "progress_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRole = "ADMIN" | "LEADER" | "MANAGER" | "STAFF";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createAt_ASC"
  | "createAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "intro_ASC"
  | "intro_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createAt_ASC"
  | "createAt_DESC"
  | "intro_ASC"
  | "intro_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReportStatus = "UNSEND" | "SEND" | "SEND_FAIL";

export type ItemType = "DONE" | "TODO";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SendRecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createAt_ASC"
  | "createAt_DESC"
  | "success_ASC"
  | "success_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EEEOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TimeRangeOrderByInput =
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserUpdateWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGroupDataInput;
}

export type EEEWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ReportItemUpdateWithWhereUniqueNestedInput {
  where: ReportItemWhereUniqueInput;
  data: ReportItemUpdateDataInput;
}

export interface TimeRangeUpdateDataInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface ReportItemUpdateManyInput {
  create?: ReportItemCreateInput[] | ReportItemCreateInput;
  update?:
    | ReportItemUpdateWithWhereUniqueNestedInput[]
    | ReportItemUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ReportItemUpsertWithWhereUniqueNestedInput[]
    | ReportItemUpsertWithWhereUniqueNestedInput;
  delete?: ReportItemWhereUniqueInput[] | ReportItemWhereUniqueInput;
  connect?: ReportItemWhereUniqueInput[] | ReportItemWhereUniqueInput;
  set?: ReportItemWhereUniqueInput[] | ReportItemWhereUniqueInput;
  disconnect?: ReportItemWhereUniqueInput[] | ReportItemWhereUniqueInput;
  deleteMany?: ReportItemScalarWhereInput[] | ReportItemScalarWhereInput;
  updateMany?:
    | ReportItemUpdateManyWithWhereNestedInput[]
    | ReportItemUpdateManyWithWhereNestedInput;
}

export interface GroupUpdateManyMutationInput {
  name?: String;
  email?: String;
  createAt?: DateTimeInput;
  intro?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  email?: String;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface GroupUpsertWithoutUsersInput {
  update: GroupUpdateWithoutUsersDataInput;
  create: GroupCreateWithoutUsersInput;
}

export interface SendRecordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SendRecordWhereInput;
  AND?: SendRecordSubscriptionWhereInput[] | SendRecordSubscriptionWhereInput;
  OR?: SendRecordSubscriptionWhereInput[] | SendRecordSubscriptionWhereInput;
  NOT?: SendRecordSubscriptionWhereInput[] | SendRecordSubscriptionWhereInput;
}

export interface GroupUpdateWithoutUsersDataInput {
  name?: String;
  email?: String;
  createAt?: DateTimeInput;
  parent?: GroupUpdateOneInput;
  intro?: String;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReportWhereInput;
  AND?: ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput;
  OR?: ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput;
  NOT?: ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput;
}

export type ReportWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  title?: String;
}>;

export interface UserUpdateManyMutationInput {
  email?: String;
  createAt?: DateTimeInput;
  name?: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
}

export interface GroupUpdateOneWithoutUsersInput {
  create?: GroupCreateWithoutUsersInput;
  update?: GroupUpdateWithoutUsersDataInput;
  upsert?: GroupUpsertWithoutUsersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GroupWhereUniqueInput;
}

export interface ReportItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: ItemType;
  type_not?: ItemType;
  type_in?: ItemType[] | ItemType;
  type_not_in?: ItemType[] | ItemType;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  progress?: String;
  progress_not?: String;
  progress_in?: String[] | String;
  progress_not_in?: String[] | String;
  progress_lt?: String;
  progress_lte?: String;
  progress_gt?: String;
  progress_gte?: String;
  progress_contains?: String;
  progress_not_contains?: String;
  progress_starts_with?: String;
  progress_not_starts_with?: String;
  progress_ends_with?: String;
  progress_not_ends_with?: String;
  remark?: String;
  remark_not?: String;
  remark_in?: String[] | String;
  remark_not_in?: String[] | String;
  remark_lt?: String;
  remark_lte?: String;
  remark_gt?: String;
  remark_gte?: String;
  remark_contains?: String;
  remark_not_contains?: String;
  remark_starts_with?: String;
  remark_not_starts_with?: String;
  remark_ends_with?: String;
  remark_not_ends_with?: String;
  AND?: ReportItemWhereInput[] | ReportItemWhereInput;
  OR?: ReportItemWhereInput[] | ReportItemWhereInput;
  NOT?: ReportItemWhereInput[] | ReportItemWhereInput;
}

export interface UserUpdateDataInput {
  email?: String;
  createAt?: DateTimeInput;
  name?: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
  group?: GroupUpdateOneWithoutUsersInput;
}

export interface SendRecordUpdateManyMutationInput {
  createAt?: DateTimeInput;
  success?: Boolean;
}

export interface GroupCreateInput {
  name: String;
  email?: String;
  createAt: DateTimeInput;
  parent?: GroupCreateOneInput;
  intro?: String;
  users?: UserCreateManyWithoutGroupInput;
}

export interface ReportWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  status?: ReportStatus;
  status_not?: ReportStatus;
  status_in?: ReportStatus[] | ReportStatus;
  status_not_in?: ReportStatus[] | ReportStatus;
  range?: TimeRangeWhereInput;
  sendBy?: UserWhereInput;
  items_every?: ReportItemWhereInput;
  items_some?: ReportItemWhereInput;
  items_none?: ReportItemWhereInput;
  AND?: ReportWhereInput[] | ReportWhereInput;
  OR?: ReportWhereInput[] | ReportWhereInput;
  NOT?: ReportWhereInput[] | ReportWhereInput;
}

export interface GroupCreateOneInput {
  create?: GroupCreateInput;
  connect?: GroupWhereUniqueInput;
}

export interface ReportUpdateDataInput {
  title?: String;
  status?: ReportStatus;
  range?: TimeRangeUpdateOneRequiredInput;
  sendBy?: UserUpdateOneRequiredInput;
  items?: ReportItemUpdateManyInput;
}

export interface UserCreateManyWithoutGroupInput {
  create?: UserCreateWithoutGroupInput[] | UserCreateWithoutGroupInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface SendRecordUpdateInput {
  sendReport?: ReportUpdateOneRequiredInput;
  sendBy?: UserUpdateOneRequiredInput;
  createAt?: DateTimeInput;
  success?: Boolean;
}

export interface UserCreateWithoutGroupInput {
  email: String;
  createAt: DateTimeInput;
  name: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
}

export type ReportItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GroupUpdateInput {
  name?: String;
  email?: String;
  createAt?: DateTimeInput;
  parent?: GroupUpdateOneInput;
  intro?: String;
  users?: UserUpdateManyWithoutGroupInput;
}

export interface ReportItemUpdateManyMutationInput {
  type?: ItemType;
  content?: String;
  progress?: String;
  remark?: String;
}

export interface GroupUpdateOneInput {
  create?: GroupCreateInput;
  update?: GroupUpdateDataInput;
  upsert?: GroupUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GroupWhereUniqueInput;
}

export type SendRecordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GroupUpdateDataInput {
  name?: String;
  email?: String;
  createAt?: DateTimeInput;
  parent?: GroupUpdateOneInput;
  intro?: String;
  users?: UserUpdateManyWithoutGroupInput;
}

export interface SendRecordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sendReport?: ReportWhereInput;
  sendBy?: UserWhereInput;
  createAt?: DateTimeInput;
  createAt_not?: DateTimeInput;
  createAt_in?: DateTimeInput[] | DateTimeInput;
  createAt_not_in?: DateTimeInput[] | DateTimeInput;
  createAt_lt?: DateTimeInput;
  createAt_lte?: DateTimeInput;
  createAt_gt?: DateTimeInput;
  createAt_gte?: DateTimeInput;
  success?: Boolean;
  success_not?: Boolean;
  AND?: SendRecordWhereInput[] | SendRecordWhereInput;
  OR?: SendRecordWhereInput[] | SendRecordWhereInput;
  NOT?: SendRecordWhereInput[] | SendRecordWhereInput;
}

export interface UserUpdateManyWithoutGroupInput {
  create?: UserCreateWithoutGroupInput[] | UserCreateWithoutGroupInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutGroupInput[]
    | UserUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutGroupInput[]
    | UserUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ReportItemUpdateManyWithWhereNestedInput {
  where: ReportItemScalarWhereInput;
  data: ReportItemUpdateManyDataInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface ReportItemUpsertWithWhereUniqueNestedInput {
  where: ReportItemWhereUniqueInput;
  update: ReportItemUpdateDataInput;
  create: ReportItemCreateInput;
}

export interface UserUpdateWithoutGroupDataInput {
  email?: String;
  createAt?: DateTimeInput;
  name?: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
}

export interface ReportItemUpdateDataInput {
  type?: ItemType;
  content?: String;
  progress?: String;
  remark?: String;
}

export interface UserUpsertWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGroupDataInput;
  create: UserCreateWithoutGroupInput;
}

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  createAt?: DateTimeInput;
  createAt_not?: DateTimeInput;
  createAt_in?: DateTimeInput[] | DateTimeInput;
  createAt_not_in?: DateTimeInput[] | DateTimeInput;
  createAt_lt?: DateTimeInput;
  createAt_lte?: DateTimeInput;
  createAt_gt?: DateTimeInput;
  createAt_gte?: DateTimeInput;
  parent?: GroupWhereInput;
  intro?: String;
  intro_not?: String;
  intro_in?: String[] | String;
  intro_not_in?: String[] | String;
  intro_lt?: String;
  intro_lte?: String;
  intro_gt?: String;
  intro_gte?: String;
  intro_contains?: String;
  intro_not_contains?: String;
  intro_starts_with?: String;
  intro_not_starts_with?: String;
  intro_ends_with?: String;
  intro_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  createAt?: DateTimeInput;
  createAt_not?: DateTimeInput;
  createAt_in?: DateTimeInput[] | DateTimeInput;
  createAt_not_in?: DateTimeInput[] | DateTimeInput;
  createAt_lt?: DateTimeInput;
  createAt_lte?: DateTimeInput;
  createAt_gt?: DateTimeInput;
  createAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  intro?: String;
  intro_not?: String;
  intro_in?: String[] | String;
  intro_not_in?: String[] | String;
  intro_lt?: String;
  intro_lte?: String;
  intro_gt?: String;
  intro_gte?: String;
  intro_contains?: String;
  intro_not_contains?: String;
  intro_starts_with?: String;
  intro_not_starts_with?: String;
  intro_ends_with?: String;
  intro_not_ends_with?: String;
  birthday?: DateTimeInput;
  birthday_not?: DateTimeInput;
  birthday_in?: DateTimeInput[] | DateTimeInput;
  birthday_not_in?: DateTimeInput[] | DateTimeInput;
  birthday_lt?: DateTimeInput;
  birthday_lte?: DateTimeInput;
  birthday_gt?: DateTimeInput;
  birthday_gte?: DateTimeInput;
  sex?: Int;
  sex_not?: Int;
  sex_in?: Int[] | Int;
  sex_not_in?: Int[] | Int;
  sex_lt?: Int;
  sex_lte?: Int;
  sex_gt?: Int;
  sex_gte?: Int;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface ReportItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReportItemWhereInput;
  AND?: ReportItemSubscriptionWhereInput[] | ReportItemSubscriptionWhereInput;
  OR?: ReportItemSubscriptionWhereInput[] | ReportItemSubscriptionWhereInput;
  NOT?: ReportItemSubscriptionWhereInput[] | ReportItemSubscriptionWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface EEESubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EEEWhereInput;
  AND?: EEESubscriptionWhereInput[] | EEESubscriptionWhereInput;
  OR?: EEESubscriptionWhereInput[] | EEESubscriptionWhereInput;
  NOT?: EEESubscriptionWhereInput[] | EEESubscriptionWhereInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  createAt?: DateTimeInput;
  name?: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
}

export interface TimeRangeUpdateManyMutationInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface GroupUpsertNestedInput {
  update: GroupUpdateDataInput;
  create: GroupCreateInput;
}

export interface TimeRangeWhereInput {
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  AND?: TimeRangeWhereInput[] | TimeRangeWhereInput;
  OR?: TimeRangeWhereInput[] | TimeRangeWhereInput;
  NOT?: TimeRangeWhereInput[] | TimeRangeWhereInput;
}

export interface TimeRangeUpsertNestedInput {
  update: TimeRangeUpdateDataInput;
  create: TimeRangeCreateInput;
}

export interface ReportCreateOneInput {
  create?: ReportCreateInput;
  connect?: ReportWhereUniqueInput;
}

export interface ReportCreateInput {
  title: String;
  status?: ReportStatus;
  range: TimeRangeCreateOneInput;
  sendBy: UserCreateOneInput;
  items?: ReportItemCreateManyInput;
}

export interface ReportItemUpdateInput {
  type?: ItemType;
  content?: String;
  progress?: String;
  remark?: String;
}

export interface TimeRangeCreateOneInput {
  create?: TimeRangeCreateInput;
}

export interface ReportItemUpdateManyDataInput {
  type?: ItemType;
  content?: String;
  progress?: String;
  remark?: String;
}

export interface TimeRangeCreateInput {
  start: DateTimeInput;
  end: DateTimeInput;
}

export interface EEEWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: EEEWhereInput[] | EEEWhereInput;
  OR?: EEEWhereInput[] | EEEWhereInput;
  NOT?: EEEWhereInput[] | EEEWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface TimeRangeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TimeRangeWhereInput;
  AND?: TimeRangeSubscriptionWhereInput[] | TimeRangeSubscriptionWhereInput;
  OR?: TimeRangeSubscriptionWhereInput[] | TimeRangeSubscriptionWhereInput;
  NOT?: TimeRangeSubscriptionWhereInput[] | TimeRangeSubscriptionWhereInput;
}

export interface UserCreateInput {
  email: String;
  createAt: DateTimeInput;
  name: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
  group?: GroupCreateOneWithoutUsersInput;
}

export interface UserUpdateInput {
  email?: String;
  createAt?: DateTimeInput;
  name?: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeInput;
  sex?: Int;
  role?: UserRole;
  group?: GroupUpdateOneWithoutUsersInput;
}

export interface GroupCreateOneWithoutUsersInput {
  create?: GroupCreateWithoutUsersInput;
  connect?: GroupWhereUniqueInput;
}

export interface ReportUpdateOneRequiredInput {
  create?: ReportCreateInput;
  update?: ReportUpdateDataInput;
  upsert?: ReportUpsertNestedInput;
  connect?: ReportWhereUniqueInput;
}

export interface GroupCreateWithoutUsersInput {
  name: String;
  email?: String;
  createAt: DateTimeInput;
  parent?: GroupCreateOneInput;
  intro?: String;
}

export interface ReportUpdateManyMutationInput {
  title?: String;
  status?: ReportStatus;
}

export interface TimeRangeUpdateOneRequiredInput {
  create?: TimeRangeCreateInput;
  update?: TimeRangeUpdateDataInput;
  upsert?: TimeRangeUpsertNestedInput;
}

export interface ReportUpdateInput {
  title?: String;
  status?: ReportStatus;
  range?: TimeRangeUpdateOneRequiredInput;
  sendBy?: UserUpdateOneRequiredInput;
  items?: ReportItemUpdateManyInput;
}

export interface ReportItemCreateInput {
  type: ItemType;
  content: String;
  progress: String;
  remark?: String;
}

export interface ReportItemCreateManyInput {
  create?: ReportItemCreateInput[] | ReportItemCreateInput;
  connect?: ReportItemWhereUniqueInput[] | ReportItemWhereUniqueInput;
}

export interface ReportItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: ItemType;
  type_not?: ItemType;
  type_in?: ItemType[] | ItemType;
  type_not_in?: ItemType[] | ItemType;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  progress?: String;
  progress_not?: String;
  progress_in?: String[] | String;
  progress_not_in?: String[] | String;
  progress_lt?: String;
  progress_lte?: String;
  progress_gt?: String;
  progress_gte?: String;
  progress_contains?: String;
  progress_not_contains?: String;
  progress_starts_with?: String;
  progress_not_starts_with?: String;
  progress_ends_with?: String;
  progress_not_ends_with?: String;
  remark?: String;
  remark_not?: String;
  remark_in?: String[] | String;
  remark_not_in?: String[] | String;
  remark_lt?: String;
  remark_lte?: String;
  remark_gt?: String;
  remark_gte?: String;
  remark_contains?: String;
  remark_not_contains?: String;
  remark_starts_with?: String;
  remark_not_starts_with?: String;
  remark_ends_with?: String;
  remark_not_ends_with?: String;
  AND?: ReportItemScalarWhereInput[] | ReportItemScalarWhereInput;
  OR?: ReportItemScalarWhereInput[] | ReportItemScalarWhereInput;
  NOT?: ReportItemScalarWhereInput[] | ReportItemScalarWhereInput;
}

export interface SendRecordCreateInput {
  sendReport: ReportCreateOneInput;
  sendBy: UserCreateOneInput;
  createAt: DateTimeInput;
  success?: Boolean;
}

export interface ReportUpsertNestedInput {
  update: ReportUpdateDataInput;
  create: ReportCreateInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  createAt?: DateTimeInput;
  createAt_not?: DateTimeInput;
  createAt_in?: DateTimeInput[] | DateTimeInput;
  createAt_not_in?: DateTimeInput[] | DateTimeInput;
  createAt_lt?: DateTimeInput;
  createAt_lte?: DateTimeInput;
  createAt_gt?: DateTimeInput;
  createAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  intro?: String;
  intro_not?: String;
  intro_in?: String[] | String;
  intro_not_in?: String[] | String;
  intro_lt?: String;
  intro_lte?: String;
  intro_gt?: String;
  intro_gte?: String;
  intro_contains?: String;
  intro_not_contains?: String;
  intro_starts_with?: String;
  intro_not_starts_with?: String;
  intro_ends_with?: String;
  intro_not_ends_with?: String;
  birthday?: DateTimeInput;
  birthday_not?: DateTimeInput;
  birthday_in?: DateTimeInput[] | DateTimeInput;
  birthday_not_in?: DateTimeInput[] | DateTimeInput;
  birthday_lt?: DateTimeInput;
  birthday_lte?: DateTimeInput;
  birthday_gt?: DateTimeInput;
  birthday_gte?: DateTimeInput;
  sex?: Int;
  sex_not?: Int;
  sex_in?: Int[] | Int;
  sex_not_in?: Int[] | Int;
  sex_lt?: Int;
  sex_lte?: Int;
  sex_gt?: Int;
  sex_gte?: Int;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  group?: GroupWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  createAt: DateTimeOutput;
  name: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeOutput;
  sex: Int;
  role: UserRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  avatar: () => Promise<String>;
  intro: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  sex: () => Promise<Int>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  intro: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  sex: () => Promise<AsyncIterator<Int>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Group {
  id: ID_Output;
  name: String;
  email?: String;
  createAt: DateTimeOutput;
  intro?: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createAt: () => Promise<DateTimeOutput>;
  parent: <T = GroupPromise>() => T;
  intro: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  parent: <T = GroupSubscription>() => T;
  intro: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EEEConnection {
  pageInfo: PageInfo;
  edges: EEEEdge[];
}

export interface EEEConnectionPromise
  extends Promise<EEEConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EEEEdge>>() => T;
  aggregate: <T = AggregateEEEPromise>() => T;
}

export interface EEEConnectionSubscription
  extends Promise<AsyncIterator<EEEConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EEEEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEEESubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  createAt: DateTimeOutput;
  name: String;
  nickname?: String;
  avatar?: String;
  intro?: String;
  birthday?: DateTimeOutput;
  sex: Int;
  role: UserRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  avatar: () => Promise<String>;
  intro: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  sex: () => Promise<Int>;
  role: () => Promise<UserRole>;
  group: <T = GroupPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  intro: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  sex: () => Promise<AsyncIterator<Int>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  group: <T = GroupSubscription>() => T;
}

export interface TimeRangePreviousValues {
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface TimeRangePreviousValuesPromise
  extends Promise<TimeRangePreviousValues>,
    Fragmentable {
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface TimeRangePreviousValuesSubscription
  extends Promise<AsyncIterator<TimeRangePreviousValues>>,
    Fragmentable {
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TimeRange {
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface TimeRangePromise extends Promise<TimeRange>, Fragmentable {
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface TimeRangeSubscription
  extends Promise<AsyncIterator<TimeRange>>,
    Fragmentable {
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TimeRangeSubscriptionPayload {
  mutation: MutationType;
  node: TimeRange;
  updatedFields: String[];
  previousValues: TimeRangePreviousValues;
}

export interface TimeRangeSubscriptionPayloadPromise
  extends Promise<TimeRangeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TimeRangePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TimeRangePreviousValuesPromise>() => T;
}

export interface TimeRangeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TimeRangeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TimeRangeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TimeRangePreviousValuesSubscription>() => T;
}

export interface AggregateTimeRange {
  count: Int;
}

export interface AggregateTimeRangePromise
  extends Promise<AggregateTimeRange>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTimeRangeSubscription
  extends Promise<AsyncIterator<AggregateTimeRange>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Report {
  id: ID_Output;
  title: String;
  status: ReportStatus;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  status: () => Promise<ReportStatus>;
  range: <T = TimeRangePromise>() => T;
  sendBy: <T = UserPromise>() => T;
  items: <T = FragmentableArray<ReportItem>>(
    args?: {
      where?: ReportItemWhereInput;
      orderBy?: ReportItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ReportStatus>>;
  range: <T = TimeRangeSubscription>() => T;
  sendBy: <T = UserSubscription>() => T;
  items: <T = Promise<AsyncIterator<ReportItemSubscription>>>(
    args?: {
      where?: ReportItemWhereInput;
      orderBy?: ReportItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TimeRangeConnection {
  pageInfo: PageInfo;
  edges: TimeRangeEdge[];
}

export interface TimeRangeConnectionPromise
  extends Promise<TimeRangeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TimeRangeEdge>>() => T;
  aggregate: <T = AggregateTimeRangePromise>() => T;
}

export interface TimeRangeConnectionSubscription
  extends Promise<AsyncIterator<TimeRangeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TimeRangeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTimeRangeSubscription>() => T;
}

export interface EEE {
  id: ID_Output;
}

export interface EEEPromise extends Promise<EEE>, Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface EEESubscription
  extends Promise<AsyncIterator<EEE>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SendRecordEdge {
  node: SendRecord;
  cursor: String;
}

export interface SendRecordEdgePromise
  extends Promise<SendRecordEdge>,
    Fragmentable {
  node: <T = SendRecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SendRecordEdgeSubscription
  extends Promise<AsyncIterator<SendRecordEdge>>,
    Fragmentable {
  node: <T = SendRecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EEESubscriptionPayload {
  mutation: MutationType;
  node: EEE;
  updatedFields: String[];
  previousValues: EEEPreviousValues;
}

export interface EEESubscriptionPayloadPromise
  extends Promise<EEESubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EEEPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EEEPreviousValuesPromise>() => T;
}

export interface EEESubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EEESubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EEESubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EEEPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface EEEPreviousValues {
  id: ID_Output;
}

export interface EEEPreviousValuesPromise
  extends Promise<EEEPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface EEEPreviousValuesSubscription
  extends Promise<AsyncIterator<EEEPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateReportItem {
  count: Int;
}

export interface AggregateReportItemPromise
  extends Promise<AggregateReportItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportItemSubscription
  extends Promise<AsyncIterator<AggregateReportItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportItemConnection {
  pageInfo: PageInfo;
  edges: ReportItemEdge[];
}

export interface ReportItemConnectionPromise
  extends Promise<ReportItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportItemEdge>>() => T;
  aggregate: <T = AggregateReportItemPromise>() => T;
}

export interface ReportItemConnectionSubscription
  extends Promise<AsyncIterator<ReportItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportItemSubscription>() => T;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  email?: String;
  createAt: DateTimeOutput;
  intro?: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createAt: () => Promise<DateTimeOutput>;
  intro: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  intro: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEEE {
  count: Int;
}

export interface AggregateEEEPromise
  extends Promise<AggregateEEE>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEEESubscription
  extends Promise<AsyncIterator<AggregateEEE>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface TimeRangeEdge {
  node: TimeRange;
  cursor: String;
}

export interface TimeRangeEdgePromise
  extends Promise<TimeRangeEdge>,
    Fragmentable {
  node: <T = TimeRangePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TimeRangeEdgeSubscription
  extends Promise<AsyncIterator<TimeRangeEdge>>,
    Fragmentable {
  node: <T = TimeRangeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReportPreviousValues {
  id: ID_Output;
  title: String;
  status: ReportStatus;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  status: () => Promise<ReportStatus>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ReportStatus>>;
}

export interface SendRecordConnection {
  pageInfo: PageInfo;
  edges: SendRecordEdge[];
}

export interface SendRecordConnectionPromise
  extends Promise<SendRecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SendRecordEdge>>() => T;
  aggregate: <T = AggregateSendRecordPromise>() => T;
}

export interface SendRecordConnectionSubscription
  extends Promise<AsyncIterator<SendRecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SendRecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSendRecordSubscription>() => T;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface ReportItemEdge {
  node: ReportItem;
  cursor: String;
}

export interface ReportItemEdgePromise
  extends Promise<ReportItemEdge>,
    Fragmentable {
  node: <T = ReportItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportItemEdgeSubscription
  extends Promise<AsyncIterator<ReportItemEdge>>,
    Fragmentable {
  node: <T = ReportItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReportItemSubscriptionPayload {
  mutation: MutationType;
  node: ReportItem;
  updatedFields: String[];
  previousValues: ReportItemPreviousValues;
}

export interface ReportItemSubscriptionPayloadPromise
  extends Promise<ReportItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportItemPreviousValuesPromise>() => T;
}

export interface ReportItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportItemPreviousValuesSubscription>() => T;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface SendRecordPreviousValues {
  id: ID_Output;
  createAt: DateTimeOutput;
  success: Boolean;
}

export interface SendRecordPreviousValuesPromise
  extends Promise<SendRecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createAt: () => Promise<DateTimeOutput>;
  success: () => Promise<Boolean>;
}

export interface SendRecordPreviousValuesSubscription
  extends Promise<AsyncIterator<SendRecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  success: () => Promise<AsyncIterator<Boolean>>;
}

export interface SendRecordSubscriptionPayload {
  mutation: MutationType;
  node: SendRecord;
  updatedFields: String[];
  previousValues: SendRecordPreviousValues;
}

export interface SendRecordSubscriptionPayloadPromise
  extends Promise<SendRecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SendRecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SendRecordPreviousValuesPromise>() => T;
}

export interface SendRecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SendRecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SendRecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SendRecordPreviousValuesSubscription>() => T;
}

export interface EEEEdge {
  node: EEE;
  cursor: String;
}

export interface EEEEdgePromise extends Promise<EEEEdge>, Fragmentable {
  node: <T = EEEPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EEEEdgeSubscription
  extends Promise<AsyncIterator<EEEEdge>>,
    Fragmentable {
  node: <T = EEESubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReportItemPreviousValues {
  id: ID_Output;
  type: ItemType;
  content: String;
  progress: String;
  remark?: String;
}

export interface ReportItemPreviousValuesPromise
  extends Promise<ReportItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ItemType>;
  content: () => Promise<String>;
  progress: () => Promise<String>;
  remark: () => Promise<String>;
}

export interface ReportItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  content: () => Promise<AsyncIterator<String>>;
  progress: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSendRecord {
  count: Int;
}

export interface AggregateSendRecordPromise
  extends Promise<AggregateSendRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSendRecordSubscription
  extends Promise<AsyncIterator<AggregateSendRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportItem {
  id: ID_Output;
  type: ItemType;
  content: String;
  progress: String;
  remark?: String;
}

export interface ReportItemPromise extends Promise<ReportItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ItemType>;
  content: () => Promise<String>;
  progress: () => Promise<String>;
  remark: () => Promise<String>;
}

export interface ReportItemSubscription
  extends Promise<AsyncIterator<ReportItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ItemType>>;
  content: () => Promise<AsyncIterator<String>>;
  progress: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SendRecord {
  id: ID_Output;
  createAt: DateTimeOutput;
  success: Boolean;
}

export interface SendRecordPromise extends Promise<SendRecord>, Fragmentable {
  id: () => Promise<ID_Output>;
  sendReport: <T = ReportPromise>() => T;
  sendBy: <T = UserPromise>() => T;
  createAt: () => Promise<DateTimeOutput>;
  success: () => Promise<Boolean>;
}

export interface SendRecordSubscription
  extends Promise<AsyncIterator<SendRecord>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sendReport: <T = ReportSubscription>() => T;
  sendBy: <T = UserSubscription>() => T;
  createAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  success: () => Promise<AsyncIterator<Boolean>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  },
  {
    name: "TimeRange",
    embedded: false
  },
  {
    name: "ReportItem",
    embedded: false
  },
  {
    name: "SendRecord",
    embedded: false
  },
  {
    name: "EEE",
    embedded: false
  },
  {
    name: "ReportStatus",
    embedded: false
  },
  {
    name: "ItemType",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
